#!/usr/bin/env python3
"""
Smart formatting test - procedural vs informational questions
"""

from src.graph.app_graph import is_procedural_question

def test_question_classification():
    """Test question type classification"""
    print("üß™ Testing Smart Question Classification")
    print("=" * 50)
    
    # Test cases from your example
    test_cases = [
        # Informational questions (should NOT use steps)
        ("is netmera using geofence or geotargeting", "English", False),
        ("Netmera geofencing nedir?", "T√ºrk√ße", False),
        ("Netmera hangi √∂zellikleri destekliyor?", "T√ºrk√ße", False),
        ("What is push notification?", "English", False),
        ("Does Netmera support A/B testing?", "English", False),
        ("Netmera kullanƒ±yor mu geofencing?", "T√ºrk√ße", False),
        
        # Procedural questions (should use steps)
        ("Netmera'da push notification nasƒ±l g√∂nderilir?", "T√ºrk√ße", True),
        ("How to integrate Netmera SDK to Android?", "English", True),
        ("Android uygulamama nasƒ±l entegre ederim?", "T√ºrk√ße", True),
        ("How can I configure geofencing in Netmera?", "English", True),
        ("Netmera kurulumu nasƒ±l yapƒ±lƒ±r?", "T√ºrk√ße", True),
        ("Steps to create a campaign", "English", True),
    ]
    
    correct = 0
    total = len(test_cases)
    
    print("üìã Test Results:")
    for question, lang, expected in test_cases:
        result = is_procedural_question(question, lang)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} {question}")
        print(f"   Expected: {'Procedural' if expected else 'Informational'}")
        print(f"   Got: {'Procedural' if result else 'Informational'}")
        print()
        
        if result == expected:
            correct += 1
    
    accuracy = (correct / total) * 100
    print(f"üéØ Classification Accuracy: {correct}/{total} ({accuracy:.1f}%)")
    
    return accuracy >= 80  # 80% threshold


def test_with_chatbot():
    """Test with actual chatbot if available"""
    print("\nü§ñ Testing with Chatbot (if available)")
    print("=" * 50)
    
    try:
        from src.graph.app_graph import build_app_graph
        from src.config import FAISS_STORE_PATH
        from langchain_community.vectorstores import FAISS
        from langchain_openai import OpenAIEmbeddings
        from pathlib import Path
        
        if not Path(FAISS_STORE_PATH).exists():
            print("‚ö†Ô∏è FAISS store not found - skipping chatbot test")
            return True
        
        # Load chatbot
        emb = OpenAIEmbeddings()
        vs = FAISS.load_local(FAISS_STORE_PATH, emb, allow_dangerous_deserialization=True)
        docs = vs.docstore._dict
        
        corpus_texts = [d.page_content for d in docs.values()]
        corpus_meta = [d.metadata for d in docs.values()]
        
        graph = build_app_graph(corpus_texts, corpus_meta)
        
        # Test questions
        test_questions = [
            "is netmera using geofence or geotargeting",  # Should be natural
            "Netmera'da push notification nasƒ±l g√∂nderilir?"  # Should be steps
        ]
        
        for question in test_questions:
            try:
                result = graph.invoke({"query": question})
                answer = result.get("answer", "")
                
                has_steps = any(indicator in answer for indicator in ["1.", "2.", "**Adƒ±mlar:**", "**Steps:**"])
                
                print(f"Question: {question}")
                print(f"Has step format: {has_steps}")
                print(f"Answer preview: {answer[:200]}...")
                print()
                
            except Exception as e:
                print(f"‚ùå Error testing question '{question}': {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è Chatbot test skipped: {e}")
        return True


def main():
    """Main test function"""
    print("üéØ SMART FORMATTING TEST")
    print("Testing procedural vs informational question detection")
    print("=" * 60)
    
    # Test classification
    classification_ok = test_question_classification()
    
    # Test with chatbot if available
    chatbot_ok = test_with_chatbot()
    
    print("\nüìã TEST SUMMARY")
    print("=" * 30)
    print(f"Question Classification: {'‚úÖ' if classification_ok else '‚ùå'}")
    print(f"Chatbot Integration: {'‚úÖ' if chatbot_ok else '‚ùå'}")
    
    if classification_ok:
        print("\nüéâ Smart formatting should now work correctly!")
        print("\nExpected behavior:")
        print("- 'is netmera using geofence' ‚Üí Natural explanation")
        print("- 'nasƒ±l push notification g√∂nderilir' ‚Üí Step-by-step")
    else:
        print("\n‚ùå Classification needs improvement")
    
    return classification_ok


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
